2023-08-30 11:34:34,704:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-30 11:34:34,704:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-30 11:34:34,704:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-30 11:34:34,704:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-30 11:34:40,065:INFO:Initializing load_model()
2023-08-30 11:34:40,065:INFO:load_model(model_name=model1_grindwall, platform=None, authentication=None, verbose=True)
2023-08-30 11:34:40,548:WARNING:C:\Users\siddh\AppData\Local\Programs\Python\Python310\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '57.4.0', 'pycaret': '3.0.4', 'IPython': '8.11.0', 'ipywidgets': '8.0.5', 'tqdm': '4.62.3', 'numpy': '1.23.0', 'pandas': '1.5.3', 'jinja2': '3.0.3', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.2', 'lightgbm': '4.0.0', 'numba': '0.56.4', 'requests': '2.28.1', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.16.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.22.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.4', 'markupsafe': '2.0.1', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.0', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.0.4', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.2', 'lightgbm': '4.0.0', 'numba': '0.56.4', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.22.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-30 11:36:56,586:INFO:Initializing predict_model()
2023-08-30 11:36:56,586:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A0E3E31C0>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E4CDD80>)
2023-08-30 11:36:56,586:INFO:Checking exceptions
2023-08-30 11:36:56,586:INFO:Preloading libraries
2023-08-30 11:36:56,590:INFO:Set up data.
2023-08-30 11:36:56,605:INFO:Set up index.
2023-08-30 11:36:58,186:INFO:Initializing predict_model()
2023-08-30 11:36:58,186:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A664AB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E4CF2E0>)
2023-08-30 11:36:58,186:INFO:Checking exceptions
2023-08-30 11:36:58,186:INFO:Preloading libraries
2023-08-30 11:36:58,189:INFO:Set up data.
2023-08-30 11:36:58,208:INFO:Set up index.
2023-08-30 11:37:00,335:INFO:Initializing predict_model()
2023-08-30 11:37:00,336:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A664AB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E515A20>)
2023-08-30 11:37:00,336:INFO:Checking exceptions
2023-08-30 11:37:00,336:INFO:Preloading libraries
2023-08-30 11:37:00,337:INFO:Set up data.
2023-08-30 11:37:00,358:INFO:Set up index.
2023-08-30 11:37:02,009:INFO:Initializing predict_model()
2023-08-30 11:37:02,013:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A664AB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E5177F0>)
2023-08-30 11:37:02,013:INFO:Checking exceptions
2023-08-30 11:37:02,013:INFO:Preloading libraries
2023-08-30 11:37:02,013:INFO:Set up data.
2023-08-30 11:37:02,029:INFO:Set up index.
2023-08-30 11:37:03,196:INFO:Initializing predict_model()
2023-08-30 11:37:03,196:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A664AB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E517AC0>)
2023-08-30 11:37:03,196:INFO:Checking exceptions
2023-08-30 11:37:03,196:INFO:Preloading libraries
2023-08-30 11:37:03,196:INFO:Set up data.
2023-08-30 11:37:03,212:INFO:Set up index.
2023-08-30 11:37:04,153:INFO:Initializing predict_model()
2023-08-30 11:37:04,153:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A664AB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E517880>)
2023-08-30 11:37:04,153:INFO:Checking exceptions
2023-08-30 11:37:04,153:INFO:Preloading libraries
2023-08-30 11:37:04,153:INFO:Set up data.
2023-08-30 11:37:04,161:INFO:Set up index.
2023-08-30 11:37:05,138:INFO:Initializing predict_model()
2023-08-30 11:37:05,138:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A664AB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E517910>)
2023-08-30 11:37:05,138:INFO:Checking exceptions
2023-08-30 11:37:05,138:INFO:Preloading libraries
2023-08-30 11:37:05,138:INFO:Set up data.
2023-08-30 11:37:05,153:INFO:Set up index.
2023-08-30 11:37:06,775:INFO:Initializing predict_model()
2023-08-30 11:37:06,775:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A664AB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E5177F0>)
2023-08-30 11:37:06,775:INFO:Checking exceptions
2023-08-30 11:37:06,775:INFO:Preloading libraries
2023-08-30 11:37:06,775:INFO:Set up data.
2023-08-30 11:37:06,788:INFO:Set up index.
2023-08-30 11:37:07,800:INFO:Initializing predict_model()
2023-08-30 11:37:07,801:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A0E37B880>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E5155A0>)
2023-08-30 11:37:07,801:INFO:Checking exceptions
2023-08-30 11:37:07,801:INFO:Preloading libraries
2023-08-30 11:37:07,802:INFO:Set up data.
2023-08-30 11:37:07,813:INFO:Set up index.
2023-08-30 11:37:14,132:INFO:Initializing predict_model()
2023-08-30 11:37:14,132:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A664AB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E517130>)
2023-08-30 11:37:14,132:INFO:Checking exceptions
2023-08-30 11:37:14,132:INFO:Preloading libraries
2023-08-30 11:37:14,132:INFO:Set up data.
2023-08-30 11:37:14,148:INFO:Set up index.
2023-08-30 11:37:20,198:INFO:Initializing predict_model()
2023-08-30 11:37:20,198:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000015A664AB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000015A0E5152D0>)
2023-08-30 11:37:20,198:INFO:Checking exceptions
2023-08-30 11:37:20,198:INFO:Preloading libraries
2023-08-30 11:37:20,198:INFO:Set up data.
2023-08-30 11:37:20,210:INFO:Set up index.
2023-08-30 11:59:07,543:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-30 11:59:07,543:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-30 11:59:07,543:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-30 11:59:07,543:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2023-08-30 11:59:10,961:INFO:Initializing load_model()
2023-08-30 11:59:10,961:INFO:load_model(model_name=model1_grindwall, platform=None, authentication=None, verbose=True)
2023-08-30 11:59:11,066:WARNING:C:\Users\siddh\AppData\Local\Programs\Python\Python310\lib\site-packages\pycaret\internal\pipeline.py:135: UserWarning: Version mismatch:
current: {'deps_info': {'pip': '23.2.1', 'setuptools': '57.4.0', 'pycaret': '3.0.4', 'IPython': '8.11.0', 'ipywidgets': '8.0.5', 'tqdm': '4.62.3', 'numpy': '1.23.0', 'pandas': '1.5.3', 'jinja2': '3.0.3', 'scipy': '1.9.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.11.0', 'category_encoders': '2.6.2', 'lightgbm': '4.0.0', 'numba': '0.56.4', 'requests': '2.28.1', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.16.1', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.22.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.4', 'markupsafe': '2.0.1', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': 'Not installed'}, 'python': {'version': '3.10.0', 'machine': 'AMD64'}}
pickle: {'deps_info': {'pip': '23.1.2', 'setuptools': '67.7.2', 'pycaret': '3.0.4', 'IPython': '7.34.0', 'ipywidgets': '7.7.1', 'tqdm': '4.66.1', 'numpy': '1.23.5', 'pandas': '1.5.3', 'jinja2': '3.1.2', 'scipy': '1.10.1', 'joblib': '1.3.2', 'sklearn': '1.2.2', 'pyod': '1.1.0', 'imblearn': '0.10.1', 'category_encoders': '2.6.2', 'lightgbm': '4.0.0', 'numba': '0.56.4', 'requests': '2.31.0', 'matplotlib': '3.7.1', 'scikitplot': '0.3.7', 'yellowbrick': '1.5', 'plotly': '5.15.0', 'plotly-resampler': 'Not installed', 'kaleido': '0.2.1', 'schemdraw': '0.15', 'statsmodels': '0.14.0', 'sktime': '0.22.0', 'tbats': '1.1.3', 'pmdarima': '2.0.3', 'psutil': '5.9.5', 'markupsafe': '2.1.3', 'pickle5': 'Not installed', 'cloudpickle': '2.2.1', 'deprecation': '2.1.0', 'xxhash': '3.3.0', 'wurlitzer': '3.0.3'}, 'python': {'version': '3.10.12', 'machine': 'x86_64'}}
  warnings.warn(

2023-08-30 12:08:12,620:INFO:Initializing predict_model()
2023-08-30 12:08:12,620:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F83E1C3070>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F83E2B3010>)
2023-08-30 12:08:12,620:INFO:Checking exceptions
2023-08-30 12:08:12,620:INFO:Preloading libraries
2023-08-30 12:08:12,620:INFO:Set up data.
2023-08-30 12:08:12,655:INFO:Set up index.
2023-08-30 12:08:13,963:INFO:Initializing predict_model()
2023-08-30 12:08:13,963:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F81BDEB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F83E2E0820>)
2023-08-30 12:08:13,963:INFO:Checking exceptions
2023-08-30 12:08:13,963:INFO:Preloading libraries
2023-08-30 12:08:13,968:INFO:Set up data.
2023-08-30 12:08:13,986:INFO:Set up index.
2023-08-30 12:08:15,941:INFO:Initializing predict_model()
2023-08-30 12:08:15,942:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F81BDEB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F83E2E2EF0>)
2023-08-30 12:08:15,943:INFO:Checking exceptions
2023-08-30 12:08:15,943:INFO:Preloading libraries
2023-08-30 12:08:15,943:INFO:Set up data.
2023-08-30 12:08:15,964:INFO:Set up index.
2023-08-30 12:08:17,221:INFO:Initializing predict_model()
2023-08-30 12:08:17,221:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F81BDEB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F83E2E3BE0>)
2023-08-30 12:08:17,221:INFO:Checking exceptions
2023-08-30 12:08:17,221:INFO:Preloading libraries
2023-08-30 12:08:17,221:INFO:Set up data.
2023-08-30 12:08:17,245:INFO:Set up index.
2023-08-30 12:08:18,623:INFO:Initializing predict_model()
2023-08-30 12:08:18,623:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F81BDEB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F83E2E0790>)
2023-08-30 12:08:18,623:INFO:Checking exceptions
2023-08-30 12:08:18,624:INFO:Preloading libraries
2023-08-30 12:08:18,626:INFO:Set up data.
2023-08-30 12:08:18,651:INFO:Set up index.
2023-08-30 12:08:19,926:INFO:Initializing predict_model()
2023-08-30 12:08:19,926:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F81BDEB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F83E2E37F0>)
2023-08-30 12:08:19,926:INFO:Checking exceptions
2023-08-30 12:08:19,926:INFO:Preloading libraries
2023-08-30 12:08:19,927:INFO:Set up data.
2023-08-30 12:08:19,939:INFO:Set up index.
2023-08-30 12:08:20,999:INFO:Initializing predict_model()
2023-08-30 12:08:21,003:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F81BDEB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F83E2E3910>)
2023-08-30 12:08:21,005:INFO:Checking exceptions
2023-08-30 12:08:21,005:INFO:Preloading libraries
2023-08-30 12:08:21,006:INFO:Set up data.
2023-08-30 12:08:21,023:INFO:Set up index.
2023-08-30 12:08:23,090:INFO:Initializing predict_model()
2023-08-30 12:08:23,090:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F81BDEB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F83E2E2EF0>)
2023-08-30 12:08:23,090:INFO:Checking exceptions
2023-08-30 12:08:23,090:INFO:Preloading libraries
2023-08-30 12:08:23,099:INFO:Set up data.
2023-08-30 12:08:23,125:INFO:Set up index.
2023-08-30 12:08:24,162:INFO:Initializing predict_model()
2023-08-30 12:08:24,162:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F81BDEB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F83E2E3D00>)
2023-08-30 12:08:24,162:INFO:Checking exceptions
2023-08-30 12:08:24,162:INFO:Preloading libraries
2023-08-30 12:08:24,162:INFO:Set up data.
2023-08-30 12:08:24,174:INFO:Set up index.
2023-08-30 12:13:16,986:INFO:Initializing predict_model()
2023-08-30 12:13:16,986:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001F81BDEB190>, estimator=Pipeline(memory=FastMemory(location=/tmp/joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['Single_q', 'Double_q', 'Dashes',
                                             'Braces', 'Spaces', 'Bad_Words'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=[],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('normalize', TransformerWrapper(transformer=StandardScaler())),
                ('actual_estimator',
                 RandomForestClassifier(n_jobs=-1, random_state=7188))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001F83E2E3640>)
2023-08-30 12:13:16,986:INFO:Checking exceptions
2023-08-30 12:13:16,986:INFO:Preloading libraries
2023-08-30 12:13:16,986:INFO:Set up data.
2023-08-30 12:13:17,005:INFO:Set up index.
